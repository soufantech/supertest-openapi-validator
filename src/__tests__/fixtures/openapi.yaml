openapi: 3.0.2
paths:
  /square/{number}:
    get:
      operationId: getNumberSquared
      summary: Get a number squared.
      parameters:
        - in: path
          name: number
          schema:
            type: integer
          required: true
          description: Number to be squared.
      responses:
        200:
          description: The squared number.
          content:
            application/json:
              schema:
                type: object
                properties:
                  number:
                    type: integer
                required:
                  - number
  /status/{httpStatusCode}:    
    get:
      operationId: getStatusCode
      summary: Returns a reponse with the given status code
      parameters:
        - $ref: '#/components/parameters/HttpStatusCode'
      responses:
        200:
          description: Get a response with the status code in the body.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                required:
                  - status
  /message:
    get:
      operationId: get message
      summary: Returns a reponse with the given status code
      parameters:
        - in: query
          name: text
          schema:
            type: string
      responses:
        200:
          description: The message provided.
          content:
            text/plain:
              schema:
                type: string
                example: 'It works!'
  /users:
    post:
      operationId: createUser
      summary: Creates an user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/User"
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
  /users/{username}:
    get:
      operationId: getUser
      summary: Get user data
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username
      security:
        - BearerAuth: []
      responses:
        200:
          description: User has access.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                required:
                  - data
        401:
          description: User is unauthenticated.
          headers:
            WWW-Authenticate:
              $ref: '#/components/headers/WWWAuthenticate'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum: ['UNAUTHENTICATED']
                required:
                  - error
        403:
          description: User is unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum: ['UNAUTHORIZED']
                required:
                  - error
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  headers:
    WWWAuthenticate:
      description: Defines the authentication method that should be used to gain access to a resource (RFC 7235, section 4.1).
      schema:
        type: string
        example: "Bearer"
  parameters:
    HttpStatusCode:
      description: HTTP status code.
      name: httpStatusCode
      in: path
      schema:
        type: integer
      required: true
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          pattern: '^[a-z]{3,8}$'
          example: johndoe
        email:
          type: string
          format: email
          example: "johndoe@example.com"
      required:
        - email
  responses:
    UserCreated:
      description: "User created successfully"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"

